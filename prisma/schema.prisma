datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String               @id
  name               String
  email              String
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  sessions           Session[]
  accounts           Account[]
  communities        Community[]
  communityUsers     CommunityUser[]
  CommunityEventUser CommunityEventUser[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Community {
  id             String           @id @default(uuid())
  image          String
  name           String           @unique()
  slug           String           @unique()
  state          String
  city           String
  totalMembers   Int              @default(0)
  description    String
  ownerId        String
  owner          User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category       String
  tags           String[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  communityUsers CommunityUser[]
  CommunityEvent CommunityEvent[]

  @@map("community")
}

model CommunityUser {
  id                 String               @default(uuid())
  userId             String
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId        String
  community          Community            @relation(fields: [communityId], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  CommunityEventUser CommunityEventUser[]

  @@id([id])
  @@map("community_user")
}

enum EventFormat {
  IN_PERSON
  VIRTUAL
  BOTH
}

model CommunityEvent {
  id                 String               @id @default(uuid())
  name               String
  description        String
  date               DateTime
  location           String?
  format             EventFormat          @default(IN_PERSON)
  calendarLink       String
  communityId        String
  community          Community            @relation(fields: [communityId], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  CommunityEventUser CommunityEventUser[]

  @@map("community_event")
}

enum CommunityEventUserStatus {
  ACCEPTED
  NOT_ACCEPTED
}

model CommunityEventUser {
  id               String                   @default(uuid())
  communityUser    CommunityUser            @relation(fields: [communityUserId], references: [id], onDelete: Cascade)
  communityUserId  String
  status           CommunityEventUserStatus
  communityEvent   CommunityEvent           @relation(fields: [communityEventId], references: [id], onDelete: Cascade)
  communityEventId String
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  User             User?                    @relation(fields: [userId], references: [id])
  userId           String?

  @@id([id])
  @@map("community_event_user")
}
